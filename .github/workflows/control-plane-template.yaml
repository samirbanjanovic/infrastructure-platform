name: Infrastructure Deploy Template

# make the template reusable for other projects
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Environment used for the deployment. This must be configured in the environment section of the repository
        required: true

jobs:
  deploy-control-plane:
    runs-on: ubuntu-latest
    name: Deploy Control Plane
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # login to azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      # install az capi extension
      - name: Install Extensions
        run: |
          az extension add --source https://github.com/Azure/azure-capi-cli-extension/releases/download/v${{vars.AZ_CAPI_VERSION}}/capi-${{vars.AZ_CAPI_VERSION}}-py2.py3-none-any.whl --verbose --yes
          az capi install -a
          az extension add --name aks-preview -y
          az extension add --name k8s-configuration -y

      - name: Create Resource Group and Management Cluster
        run: |
          echo  "Checking if AKS cluster of name ${{ vars.CONTROL_PLANE_NAME }} already exists"

          az aks list -g ${{ vars.RESOURCE_GROUP_NAME }} --query "[?name=='${{ vars.CONTROL_PLANE_NAME }}']"
          if [ $? -eq 0 ]; then          
            echo "AKS cluster ${{ vars.CONTROL_PLANE_NAME }} already exists"
          else
            az group create \
              --name ${{ vars.RESOURCE_GROUP_NAME }} \
              --location ${{ vars.LOCATION }} \
              --output yaml \
              --verbose
            az aks create \
              --name ${{ vars.CONTROL_PLANE_NAME }} \
              --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
              --location ${{ vars.LOCATION }} \
              --generate-ssh-keys \
              --max-pods 100 \
              --network-dataplane azure \
              --network-plugin azure \
              --node-vm-size Standard_D2s_v3 \
              --node-count 1 \
              --enable-cluster-autoscaler true \
              --min-count 1 \
              --max-count 3 \
              --node-osdisk-type Ephemeral \
              --node-osdisk-size 48 \
              --os-sku AzureLinux \
              --verbose
          fi

      # create the control plane using capi
      - name: Init clusterctl
        run: |
          az aks get-credentials -n ${{ vars.CONTROL_PLANE_NAME }} -g ${{ vars.RESOURCE_GROUP_NAME }}

          # Check if the secret alrady exists and if it does skip creating it
          kubectl get secret "$AZURE_CLUSTER_IDENTITY_SECRET_NAME" --namespace "$AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE"
          
          if [ $? -eq 0 ]; then
            echo "Secret $AZURE_CLUSTER_IDENTITY_SECRET_NAME already exists"
          else
            # Create a secret to include the password of the Service Principal identity created in Azure
            # This secret will be referenced by the AzureClusterIdentity used by the AzureCluster
            kubectl create secret generic "$AZURE_CLUSTER_IDENTITY_SECRET_NAME" \
              --from-literal=clientSecret="$AZURE_CLIENT_SECRET" \
              --namespace "$AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE"

            clusterctl init --infrastructure azure
          fi          
        env:
          # environment variables used to configure clusterctl
          # to run off an aks cluster
          AZURE_CLUSTER_IDENTITY_SECRET_NAME: 'cluster-identity-secret'
          CLUSTER_IDENTITY_NAME: 'cluster-identity'
          AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE: 'default'
          AZURE_CONTROL_PLANE_MACHINE_TYPE: 'Standard_D2s_v3'
          AZURE_NODE_MACHINE_TYPE: 'Standard_D2s_v3'
          AZURE_RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP_NAME }}
          EXP_MACHINE_POOL: 'true'
          EXP_AKS_RESOURCE_HEALTH: 'true'
          WORKER_MACHINE_COUNT: '2'
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # install flux cd onto the cluster
      - name: Install Flux CD
        run: |          
          # build the repo url for flux
          REPO_URL='https'$(echo ${{ github.repositoryUrl }} | cut -c4-512)
          
          az k8s-configuration flux create \
            --name '${{ vars.CONTROL_PLANE_NAME }}-flux' \
            --cluster-name ${{ vars.CONTROL_PLANE_NAME }} \
            --cluster-type managedClusters \
            --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
            --url $REPO_URL \
            --branch main \
            --kustomization name=${{ vars.CONTROL_PLANE_NAME }}-kustomization
